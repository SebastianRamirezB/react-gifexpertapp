{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAuCeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAoBrC,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCEhBG,EARK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACzB,OACI,yBAAKC,UAAU,QACX,4BAAKF,GACL,yBAAKG,IAAKF,EAAKG,IAAKJ,M,uBCLjBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfN,EAFe,iDAEiCK,EAFjC,+DAGFE,MAAMP,GAHJ,cAGfQ,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QATrB,kBAadW,GAbc,4CAAH,sDC0BPM,EAvBE,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECCL,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/ByB,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAW,WAEPjB,EAAQC,GACPiB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAIlB,CAACb,IAGGc,EDnB0BK,CAAanB,GAAjCU,EAFgB,EAErBL,KAAaQ,EAFQ,EAERA,QAErB,OACI,oCACA,4BAAKb,GACHa,GAAW,0CACb,yBAAKjB,UAAU,iEAEPc,EAAOH,KAAK,SAAAC,GACR,OAAO,kBAAC,EAAD,eACHY,IAAKZ,EAAIC,IACLD,UEgBba,EA5BM,WAAM,IAAD,EAEczC,mBAAS,CAAC,cAFxB,mBAEf0C,EAFe,KAEH3C,EAFG,KAStB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACA,4BAEQ2C,EAAWf,KAAI,SAAAP,GAAQ,OACnB,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,UCnBtCuB,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a56bd293.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n\n        if(inputValue.trim().length > 1 ) {\n            \n            setCategories(cate => [inputValue, ...cate ]);\n            setInputValue('');\n        }\n\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n      </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card\">\n            <h4>{title}</h4>\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\nexport default GifGridItem;","\n  export const getGifs = async (category) =>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=12&api_key=sL1shnpjFtZhUFi6KHIxDzFizDcpt3md`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n    })\n    return gifs;\n    \n\n}","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport {useFetchGifs} from '../hooks/useFetchGifs'\n\nconst  GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return(\n        <>\n        <h3>{category}</h3>\n        { loading && <p>Cargando...</p> }\n        <div className=\"card-grid animate__animated animate__fadeIn animate__delay-1s\">\n            {\n                images.map( img => {\n                    return <GifGridItem  \n                        key={img.id}\n                        {...img}\n                    />\n                })\n            }\n        </div>\n        </>\n    )\n\n}\n\nexport default GifGrid;\n\n\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs(category)\n        .then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        })\n\n    }, [category])\n\n\n    return state;\n}\n\n","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nconst GifExpertApp = () =>{\n\n    const [categories, setCategories] = useState(['One Punch']); \n\n    // const handleAdd = () => {\n    //     // setCategories(['Helsing', ...categories]);\n    //     setCategories(cate => [...cate, 'Helsing']);\n    // }\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n};\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}